services:
  db:
    build: ./pg
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    command: postgres -c log_destination=stderr -c log_statement=all -c log_destination=csvlog
    healthcheck:
      test:
        - "CMD-SHELL"
        - "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"
      interval: "5s"
      timeout: "5s"
      retries: 3
      start_period: "5s"
    volumes:
      - db_data:/var/lib/postgresql/data
  wait_for_db:
    image: alpine:3.18.2
    entrypoint: /bin/sh
    command: -c "echo -n 'db started';echo"
    depends_on:
      db:
        condition: service_healthy
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - metrics_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
  prometheus_postgres:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.13.2
    ports:
      - :9187:9187
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB}?sslmode=disable
  grafana:
    build:
      context: .
      dockerfile: ./grafana/Dockerfile
      args:
        POSTGRES_USER: "${POSTGRES_USER}"
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  db_data:
  metrics_data:
  grafana_data:

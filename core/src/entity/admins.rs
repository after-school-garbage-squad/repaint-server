//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use email_address::EmailAddress;
use repaint_server_model::{admin::Admin, id::Id};
use sea_orm::entity::prelude::*;

use crate::ty::string::AsString;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "admins")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub admin_id: AsString<Id<Admin>>,
    #[sea_orm(unique)]
    pub email: AsString<EmailAddress>,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        super::events_admins::Relation::Events.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::events_admins::Relation::Admins.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

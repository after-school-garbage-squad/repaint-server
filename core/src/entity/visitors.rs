//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use repaint_server_model::id::Id;
use repaint_server_model::visitor::Visitor;
use sea_orm::entity::prelude::*;

use crate::ty::string::AsString;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "visitors")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub event_id: i32,
    #[sea_orm(unique)]
    pub visitor_id: AsString<Id<Visitor>>,
    pub registration_id: String,
    pub is_updated: bool,
    pub is_downloadable: bool,
    pub last_droped_at: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::events::Entity",
        from = "Column::EventId",
        to = "super::events::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Events,
    #[sea_orm(has_many = "super::visitor_images::Entity")]
    VisitorImages,
    #[sea_orm(has_many = "super::visitor_palettes::Entity")]
    VisitorPalettes,
    #[sea_orm(has_many = "super::visitor_spots::Entity")]
    VisitorSpots,
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl Related<super::visitor_images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VisitorImages.def()
    }
}

impl Related<super::visitor_palettes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VisitorPalettes.def()
    }
}

impl Related<super::visitor_spots::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VisitorSpots.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
